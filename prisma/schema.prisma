// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Provider {
  kakao
  naver
  google
}

model User {
  id               String             @id @unique @default(uuid())
  email            String             @unique
  provider         Provider
  name             String             @db.VarChar(5)
  nickname         String             @unique @db.VarChar(10)
  phone            String             @db.VarChar(13)
  profileImage     String
  major            String
  interests        UserInterest[]
  communities      Community[]
  comments         Comment[]
  communityLike    CommunityLike[]
  commentLike      CommentLike[]
  scrapCompetition ScrapCompetition[]
  scrapOutside     ScrapOutside[]
  scrapLanguage    ScrapLanguage[]
  scrapQNet        ScrapQNet[]
  scrapIntern      ScrapIntern[]
}

model Community {
  id              String          @id @unique @default(uuid())
  category        String          @db.VarChar(20)
  title           String          @db.VarChar(30)
  detail          String          @db.LongText
  view            Int             @default(0)
  likeCount       Int             @default(0)
  commentCount    Int             @default(0)
  date            DateTime        @default(dbgenerated("NOW()")) @db.DateTime
  userId          String?
  user            User?           @relation(fields: [userId], references: [id])
  communitiyLikes CommunityLike[]
  comments        Comment[]
}

model Comment {
  id          String        @id @unique @default(uuid())
  comment     String        @db.VarChar(100)
  createAt    DateTime      @default(dbgenerated("NOW()")) @db.DateTime
  userId      String?
  user        User?         @relation(fields: [userId], references: [id])
  communityId String?
  community   Community?    @relation(fields: [communityId], references: [id])
  commentLike CommentLike[]
}

model CommunityLike {
  id          String     @id @unique @default(uuid())
  userId      String
  user        User       @relation(fields: [userId], references: [id])
  communityId String?
  community   Community? @relation(fields: [communityId], references: [id])
}

model CommentLike {
  id        String   @id @unique @default(uuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id])
}

model Interest {
  id            String         @id @unique @default(uuid())
  interest      String         @unique
  keywords      Keyword[]
  userInterests UserInterest[]
}

model Keyword {
  id            String         @id @unique @default(uuid())
  keyword       String         @unique
  interests     Interest[]
  userInterests UserInterest[]
}

model UserInterest {
  id         String   @id @unique @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  interest   Interest @relation(fields: [interestId], references: [id])
  interestId String
  keyword    Keyword  @relation(fields: [keywordId], references: [id])
  keywordId  String
}

model ScrapCompetition {
  id            String   @id @unique @default(uuid())
  createdAt     DateTime @default(dbgenerated("NOW()")) @db.DateTime
  competitionId String
  user          User     @relation(fields: [userId], references: [id])
  userId        String
}

model ScrapOutside {
  id        String   @id @unique @default(uuid())
  createdAt DateTime @default(dbgenerated("NOW()")) @db.DateTime
  outsideId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model ScrapLanguage {
  id         String   @id @unique @default(uuid())
  createdAt  DateTime @default(dbgenerated("NOW()")) @db.DateTime
  languageId String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
}

model ScrapQNet {
  id        String   @id @unique @default(uuid())
  createdAt DateTime @default(dbgenerated("NOW()")) @db.DateTime
  qNetId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model ScrapIntern {
  id        String   @id @unique @default(uuid())
  createdAt DateTime @default(dbgenerated("NOW()")) @db.DateTime
  internId  String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

// 대용량 데이터를 생각해서 -> 엘라스틱 서치
// 대용량 데이터를 생각해서 -> 엘라스틱 서치 -> 이동 완료
// model Outside {
//   id                    String @id @unique @default(uuid())
//   Dday                  String
//   title                 String
//   view                  Int
//   mainImage             String @db.LongText
//   organization          String
//   enterprise            String
//   target                String
//   applicationPeriod     String
//   participationPeriod   String
//   personnel             String
//   region                String
//   preferentialTreatment String
//   homePage              String @db.LongText
//   detail                String @db.LongText
//   benefits              String
//   interests             String
//   field                 String
//   month                 Int
// }

// model Intern {
//   id                    String @id @unique @default(uuid())
//   Dday                  String
//   title                 String
//   view                  Int
//   mainImage             String @db.LongText
//   organization          String
//   enterprise            String
//   applicationPeriod     String
//   preferentialTreatment String
//   personnel             String
//   target                String
//   region                String
//   homePage              String @db.LongText
//   detail                String @db.LongText
// }

// model Competition {
//   id                String @id @unique @default(uuid())
//   Dday              String
//   title             String
//   view              Int
//   mainImage         String @db.LongText
//   organization      String
//   enterprise        String
//   target            String
//   scale             Int?
//   applicationPeriod String
//   benefits          String
//   homePage          String @db.LongText
//   interests         String
//   detail            String @db.LongText
// }

// model Language {
//   id                String  @id @unique @default(uuid())
//   classify          String
//   test              String
//   homePage          String
//   turn              String?
//   Dday              String
//   resultDay         String
//   applicationPeriod String
// }

// model QNet {
//   id            String         @id @unique @default(uuid())
//   detail        String         @db.LongText
//   scheduleInfo  String         @db.LongText
//   jmNm          String
//   engJmNm       String?
//   instiNm       String
//   implNm        String
//   view          Int            @default(0)
//   examSchedules ExamSchedule[]
//   subCategoryId String
//   subCategory   SubCategory    @relation(fields: [subCategoryId], references: [id])
// }

// model MainCategory {
//   id          String        @id @unique @default(uuid())
//   keyword     String        @unique
//   subCategory SubCategory[]
// }
